<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Adapter;
use AppBundle\Entity\ModuleInstance;
use AppBundle\Entity\Module;

/**
 * ModuleInstanceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkflowModuleInstanceRepository extends EntityRepository
{
    /**
     *
     */
    public function getNextAdapters($adapterId, $currentStep)
    {
         $q = $this->createQueryBuilder('wmi')
             ->where('wmi.workflow = :workflowId')
             ->andwhere('wmi.workflowModuleInstanceId > :currentStep')
             ->orderBy('wmi.workflowModuleInstanceId','ASC')
             ->setParameter('workflowId', $adapterId)
             ->setParameter('currentStep', $currentStep)
             ->getQuery();

        return $q->getResult();

    }


    /**
	 * @param Adapter $adapter
	 *
	 * @return ModuleInstance[]
	 */
	public function getAdapterModulesInstances(Adapter $adapter)
	{
		return $this->findBy(
			[
				'adapter' 	=> $adapter,
				'isActive' 	=> 1
			],
			['executeOrder' => 'ASC']
		);
	}

	/**
	 * This function receives the id of one module instance and returns static ModuleInstance settings
	 *
	 * @param ModuleInstance $moduleInstance
	 *
	 * @return array
	 */
	public function getModuleInstanceStaticSettings($moduleInstance)
	{
		$result = [];

		$result['module_name']            = $moduleInstance->getModule()->getName();
		$result['continueOnWarning']      = $moduleInstance->getContinueOnWarning();
		$result['continueOnError']        = $moduleInstance->getContinueOnError();

		return $result;
	}

	/***
	 * @param               $adapter
	 * @param               $moduleId
	 * @param               $executeOrder
	 * @param               $name
	 * @param EntityManager $entityManager
	 *
	 * @return ModuleInstance
	 */
	public function saveModuleInstance($adapter, $moduleId, $executeOrder, $name, EntityManager $entityManager)
	{
		try {
			$moduleInstance           = new ModuleInstance();
			$moduleInstanceRepository = $this->getEntityManager()->getRepository('AppBundle:Module');
			$moduleObject             = $moduleInstanceRepository->findOneBy(array('moduleId' => $moduleId));
			$moduleInstance->setModule($moduleObject);
			$moduleInstance->setAdapter($adapter);
			$moduleInstance->setExecuteOrder($executeOrder);
			$moduleInstance->setContinueOnError(0);
			$moduleInstance->setContinueOnWarning(1);
			$moduleInstance->setName($name);

			//Persist ModuleInstance Object
			$entityManager->persist($moduleInstance);
			$entityManager->flush();

			// Return results
			return $moduleInstance;
		} catch (Exception $e) {

			// Add error to the log
			$this->logger->addError(
				'Problem saving moduleInstance: ' . $e->getMessage(),
				['exception_trace' => $e->getTrace()]
			);
			return false;
		}
	}

	/**
	 * This function deletes a module instance given its ID.
	 * This function doesn't call '$this->getEntityManager()->flush()', So whenever it's called once it should be followed by an '$this->getEntityManager()->flush()'.
	 *
	 * @param integer $moduleInstanceId
	 *
	 */
	public function deleteModuleInstance($moduleInstanceId)
	{
		try {
			$moduleInstance = $this->find($moduleInstanceId);
			$moduleInstance->setIsActive(0);
			return true;
		} catch (\Exception $e) {
			return false;
		}
	}

	/**
	 * This function updates a module instance
	 *
	 * @param integer $moduleInstanceId
	 * @param array   $valuesArray
	 *
	 * @return ModuleInstance
	 */
	public function updateModuleInstance($moduleInstanceId, $valuesArray)
	{
		try {
			$moduleInstance = $this->find($moduleInstanceId);

			// Check for existence of module instance
			if (!$moduleInstance) {
				return false;
			}

			// Change module instance name if provided
			if (array_key_exists('name', $valuesArray)) {
				$moduleInstance->setName($valuesArray['name']);
			}

			// Change module instance order if provided
			if (array_key_exists('executeOrder', $valuesArray)) {
				$moduleInstance->setExecuteOrder($valuesArray['executeOrder']);
			}

			//Save changes
			$this->getEntityManager()->flush();

			// Return results
			return $moduleInstance;
		} catch (Exception $e) {

			// Add error to the log
			$this->logger->addError(
				'Problem updating moduleInstance: ' . $e->getMessage(),
				['exception_trace' => $e->getTrace()]
			);
			return false;
		}
	}
}
