<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Module;
use AppBundle\Entity\ModuleSetting;
use AppBundle\Enumeration\EnumModuleSettingType;

/**
 * ModuleSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ModuleSettingRepository extends EntityRepository
{
	/**
	 * Return the default settings of a module.
	 *
	 * @param Module $module
	 *
	 * @return array
	 */
	public function getModuleSettings($module)
	{
		/**
		 * @var ModuleSetting[] $settings
		 */
		$result   = [];
		$settings = $this->findBy(['module' => $module]);

		foreach ($settings as $setting) {
			$key          = $setting->getName();
			$value        = $setting->getValue();
			$result[$key] = $value;
		}

		return $result;
	}

	/**
	 * Return the default settings of a module with its type.
	 *
	 * @param Module $module
	 *
	 * @return array
	 */
	public function getModuleSettingsWithType($module)
	{
		/**
		 * @var ModuleSetting[] $settings
		 */
		$result   = [];
		$settings = $this->findBy(['module' => $module]);

		foreach ($settings as $setting) {
			$key               = $setting->getDisplayName();
			$value             = $setting->getValue();

			// Populate the results
			$result[$setting->getModuleSettingId()][$key] = $value;

			// Get module setting type
			$moduleSettingTypeId = $setting->getModuleSettingType()->getModuleSettingTypeId();
			$moduleSettingType = $setting->getModuleSettingType()->getTypeName();

			$result[$setting->getModuleSettingId()]['type'] = ['id'=>$setting->getModuleSettingType()->getModuleSettingTypeId(),'name'=>$moduleSettingType];
			$result[$setting->getModuleSettingId()]['is_required'] = $setting->isRequired();

			$optionsArray = array();
			$result[$setting->getModuleSettingId()]['options'] = array();

			// Handle module setting of type Select and Multiselect
			if ($moduleSettingTypeId == EnumModuleSettingType::SELECT || $moduleSettingTypeId == EnumModuleSettingType::MULTISELECT) {
				$optionsRepository  = $this->getEntityManager()->getRepository('AppBundle:ModuleSettingOption');
				$options            = $optionsRepository->findBy(array('moduleSetting' => $setting->getModuleSettingId()));
				foreach ($options as $option) {

					// Define tmp array to use for populating $optionsArray
					$tmpOption          = [];
					$tmpOption['value'] = $option->getModuleSettingOptionId();
					$tmpOption['name']  = $option->getValue();
					$optionsArray[]     = $tmpOption;
				}
				$result[$setting->getModuleSettingId()]['options'] = $optionsArray;
			}
			elseif ($moduleSettingTypeId == EnumModuleSettingType::SELECT_AUDIO)
            {
                $audioRepository  = $this->getEntityManager()->getRepository('CequensBundle:AudioFile');
                $audios            = $audioRepository->findAll();
                foreach ($audios as $audio) {

                    // Define tmp array to use for populating $optionsArray
                    $tmpOption          = [];
                    $tmpOption['value'] = $audio->getFileId();
                    $tmpOption['name']  = $audio->getAudioFileName();
                    $optionsArray[]     = $tmpOption;
                }
                $result[$setting->getModuleSettingId()]['options'] = $optionsArray;
            }
            elseif ($moduleSettingTypeId == EnumModuleSettingType::SELECT_MODULE)
            {
                $adapterRepository  = $this->getEntityManager()->getRepository('CequensBundle:Application');
                $adapters            = $adapterRepository->findAll();
                foreach ($adapters as $adapter) {

                    // Define tmp array to use for populating $optionsArray
                    $tmpOption          = [];
                    $tmpOption['value'] = $adapter->getAdapterId();
                    $tmpOption['name']  = $adapter->getApplicationName();
                    $optionsArray[]     = $tmpOption;
                }
                $result[$setting->getModuleSettingId()]['options'] = $optionsArray;
            }
            elseif ($moduleSettingTypeId == EnumModuleSettingType::NAME_VALUE_ARRAY_WORKFLOW)
            {
                $adapterRepository  = $this->getEntityManager()->getRepository('AppBundle:Adapter');
                $adapters            = $adapterRepository->findAll();
                foreach ($adapters as $adapter) {

                    // Define tmp array to use for populating $optionsArray
                    $tmpOption          = [];
                    $tmpOption['value'] = $adapter->getAdapterId();
                    $tmpOption['name']  = $adapter->getName();
                    $optionsArray[]     = $tmpOption;
                }
                $result[$setting->getModuleSettingId()]['options'] = $optionsArray;
            }
		}
		return $result;
	}
}
