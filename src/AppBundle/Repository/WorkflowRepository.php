<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use AppBundle\Entity\Admin;
use AppBundle\Entity\File;
use AppBundle\Entity\Workflow;
use AppBundle\Enumeration\EnumExecutionStatus;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * FileImportRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class WorkflowRepository extends EntityRepository
{
	/**
	 * @return array
	 */
	public function getPendingFileImports()
	{
		/**
		 * @var Workflow[] $pendingImports
		 */
		$pendingImportsIds = [];

		$pendingImports = $this->findBy(['executionStatus' => EnumExecutionStatus::ADAPTATION_PENDING, 'isActive' => 1]);
		foreach ($pendingImports as $pendingImport) {
			$pendingImportsIds[] = $pendingImport->getFileImportId();
		}

		return $pendingImportsIds;
	}

	/**
	 * Get all file imports
	 *
	 * @param array $filters
	 * @param       $currentPage
	 * @param       $limit
	 *
	 * @return Paginator
	 */
	public function getAllFileImports($filters = array(), $currentPage, $limit)
	{
		// Create query
		$query = $this->createQueryBuilder('Workflows');
		$query->andWhere('Workflows.isActive = 1');
        $query->andWhere('Workflows.isParent = 1');

		// Construct filters
		if(!empty($filters['admin_id']))
		{
			$query->andWhere('Workflows.admin = :admin_id');
			$query->setParameter('admin_id', $filters['admin_id']);
		}

		if(!empty($filters['execution_status']))
		{
			$query->andWhere('Workflows.executionStatus = :execution_status');
			$query->setParameter('execution_status', $filters['execution_status']);
		}

		if(!empty($filters['adapter_id']))
		{
			$query->andWhere(
				$query->expr()->in('Workflows.adapter', $filters['adapter_id'])
			);
		}

		if(!empty($filters['start_date']))
		{
			$query->andWhere('Workflows.uploadedAt >= :start_date');
			$query->setParameter('start_date', $filters['start_date']);
		}

		if(!empty($filters['end_date']))
		{
			$query->andWhere('Workflows.uploadedAt <= :end_date');
			$query->setParameter('end_date', $filters['end_date']);
		}
		//$query->orderBy('Workflows.uploadedAt', 'DESC');
		$query->getQuery();
		$paginator = $this->paginate($query, $currentPage, $limit);
		return $paginator;
	}

	/**
	 * Get status count
	 * @param string $status
	 *
	 * @return array
	 */
	public function getFileImportsStatusCount($status)
	{
		$pending = EnumExecutionStatus::$executionStatusMap[EnumExecutionStatus::ADAPTATION_PENDING];
		$failed = EnumExecutionStatus::$executionStatusMap[EnumExecutionStatus::FAILED];
		$fileImportStatus = array(
			$pending => array(
				EnumExecutionStatus::ADAPTATION_PENDING,
				EnumExecutionStatus::ADAPTATION_IN_PROGRESS,
				EnumExecutionStatus::IMPORT_PENDING,
				EnumExecutionStatus::IMPORT_IN_PROGRESS,
			),
			$failed => array(
				EnumExecutionStatus::FAILED
			)
		);

		// Create our query
		$query = $this->createQueryBuilder('Workflows');
		$query->select('count(Workflows.workflowId)');

		// Filter by active file imports only
		$query->andWhere('Workflows.isActive = 1');

		// Fill in the count
		$query->andWhere(
			$query->expr()->in('Workflows.executionStatus', $fileImportStatus[$status])
		);
		$data = $query->getQuery()->getSingleScalarResult();
		return $data;
	}

	/**
	 * Paginator Helper
	 *
	 * Pass through a query object, current page & limit
	 * the offset is calculated from the page and limit
	 * returns an `Paginator` instance, which you can call the following on:
	 *
	 *     $paginator->getIterator()->count() # Total fetched (ie: `5` posts)
	 *     $paginator->count() # Count of ALL posts (ie: `20` posts)
	 *     $paginator->getIterator() # ArrayIterator
	 *
	 * @param Query				 $dql   DQL Query Object
	 * @param integer            $page  Current page (defaults to 1)
	 * @param integer            $limit The total number per page (defaults to 5)
	 *
	 * @return \Doctrine\ORM\Tools\Pagination\Paginator
	 */
	public function paginate($dql, $page = 1, $limit = 5)
	{
		$paginator = new Paginator($dql);

		$paginator->getQuery()->setFirstResult($limit * ($page - 1)); // Offset
		$paginator->getQuery()->setMaxResults($limit); // Limit

		return $paginator;
	}

	/**
	 * Save file import
	 *
	 * @param File  $file
	 * @param Admin $admin
	 *
	 * @return Workflow
	 */
	public function saveFileImport(File $file, Admin $admin)
	{
		$fileImport = new Workflow();
		$fileImport->setFile($file);
		$fileImport->setStartedAt(null);
		$fileImport->setAdmin($admin);

		// Persist File Import Object
		$this->getEntityManager()->persist($fileImport);
		$this->getEntityManager()->flush();

		// Return fileImport object
		return $fileImport;
	}

	/**
	 * Delete a file import
	 *
	 * @param Workflow  $fileImportId
	 *
	 * @return Workflow
	 */
	public function deleteFileImport($fileImport)
	{
		try {

			// Soft delete the file import
			$fileImport->setIsActive(0);
			$this->getEntityManager()->flush();
			return $fileImport;
		} catch (\Exception $e) {
			return false;
		}
	}
}
